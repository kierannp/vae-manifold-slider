[{"/Users/knp/vae-manifold-slider/src/index.js":"1","/Users/knp/vae-manifold-slider/src/App.js":"2","/Users/knp/vae-manifold-slider/src/doubleSlider.js":"3"},{"size":432,"mtime":1614137477557,"results":"4","hashOfConfig":"5"},{"size":308,"mtime":1614137759547,"results":"6","hashOfConfig":"5"},{"size":2220,"mtime":1614136907139,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"y9rx7v",{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/knp/vae-manifold-slider/src/index.js",[],"/Users/knp/vae-manifold-slider/src/App.js",["16","17","18"],"import './App.css';\nimport DoubleSlider from './doubleSlider';\nimport React, { useState, useRef, useEffect} from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <DoubleSlider></DoubleSlider>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/knp/vae-manifold-slider/src/doubleSlider.js",["19","20"],"// import Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport './doubleSlider.css';\nimport { useState, useRef } from 'react';\nimport * as tf from '@tensorflow/tfjs';\n\nlet decoder;\nlet result;\nvar url = {\n  modelLink: 'https://storage.googleapis.com/test-tfjs/model.json',\n  binData: 'https://storage.googleapis.com/test-tfjs/group1-shard1of1.bin'\n};    \nfunction DoubleSlider() {  \n    const [sliderVState, setSliderVState] = useState(0);\n    const [sliderHState, setSliderHState] = useState(0);\n    const canvasRef = useRef();\n    let handleVChange = (e, val) => setSliderVState(val);\n    let handleHChange = (e, val) => setSliderHState(val);\n\n    async function loadModel() {\n      try {\n        decoder = await tf.loadLayersModel(url.modelLink);\n      } catch (err) {\n        alert(\"model loading error....\");\n      }\n    }\n    async function secondLoad(){\n      let res = await loadModel();\n    }\n    async function processState() {\n      let inputTensor = tf.tensor([sliderHState, sliderVState],[1, 2]);\n      result = decoder.predict(inputTensor,{batchSize: 1}).reshape([28,28]);\n      await tf.browser.toPixels(result, canvasRef.current);\n    }\n    let res = secondLoad().then( () => processState());\n    \n    console.log(sliderHState, sliderVState);\n    return (\n    <div className=\"large-box\">  \n      <div className=\"image-box\">\n        <canvas ref={canvasRef}></canvas>\n      </div>\n      <div className=\"vSlider\">\n        <Slider\n          orientation=\"vertical\"\n          // getAriaValueText={valuetext}\n          defaultValue={0}\n          step={.02}\n          aria-labelledby=\"discrete-vertical-slider-small-steps\"\n          min={-1}\n          max={1}\n          marks\n          valueLabelDisplay=\"auto\"\n          onChange={handleVChange}\n        />\n      </div>\n      <div className=\"hSlider\">\n        <Slider\n          defaultValue={0}\n          // getAriaValueText={valuetext}\n          aria-labelledby=\"discrete-slider-small-steps\"\n          step={.02}\n          marks\n          min={-1}\n          max={1}\n          valueLabelDisplay=\"auto\"\n          onChange={handleHChange}\n        />\n      </div>\n    </div>\n    );\n  }\n  export default DoubleSlider;",{"ruleId":"21","severity":1,"message":"22","line":3,"column":17,"nodeType":"23","messageId":"24","endLine":3,"endColumn":25},{"ruleId":"21","severity":1,"message":"25","line":3,"column":27,"nodeType":"23","messageId":"24","endLine":3,"endColumn":33},{"ruleId":"21","severity":1,"message":"26","line":3,"column":35,"nodeType":"23","messageId":"24","endLine":3,"endColumn":44},{"ruleId":"21","severity":1,"message":"27","line":28,"column":11,"nodeType":"23","messageId":"24","endLine":28,"endColumn":14},{"ruleId":"21","severity":1,"message":"27","line":35,"column":9,"nodeType":"23","messageId":"24","endLine":35,"endColumn":12},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'useEffect' is defined but never used.","'res' is assigned a value but never used."]