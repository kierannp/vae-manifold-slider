{"ast":null,"code":"var _jsxFileName = \"/Users/knp/vae-slider/src/doubleSlider.js\",\n    _s = $RefreshSig$();\n\n// import Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport './doubleSlider.css';\nimport { useState } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet valuetext = value => `${value}`;\n\nlet model;\n\nfunction DoubleSlider() {\n  _s();\n\n  const [sliderVState, setSliderVState] = useState(1);\n  const [sliderHState, setSliderHState] = useState(1);\n  let fileName = `/man-images/${sliderHState}_${sliderVState}.png`;\n  const url = {\n    modelLink: 'https://www.dropbox.com/s/mhioc6hkavycmm8/model.json',\n    metadata: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json'\n  };\n\n  async function loadModel(url) {\n    try {\n      model = await tf.loadLayersModel(url.modelLink);\n      console.log(model);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  dbx.filesListFolder({\n    path: './'\n  }).then(response => console.log(response));\n\n  function handleVChange(e) {\n    setSliderVState(e.target.value);\n  }\n\n  function handleHChange(e) {\n    console.log(e);\n    setSliderHState(e.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"large-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-box\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: process.env.PUBLIC_URL + fileName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vSlider\",\n      children: /*#__PURE__*/_jsxDEV(Slider, {\n        orientation: \"vertical\",\n        getAriaValueText: valuetext,\n        defaultValue: 1,\n        \"aria-labelledby\": \"discrete-slider-small-steps\",\n        min: 0,\n        max: 100,\n        marks: true,\n        valueLabelDisplay: \"auto\",\n        onChange: handleVChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hSlider\",\n      children: /*#__PURE__*/_jsxDEV(Slider, {\n        defaultValue: 1,\n        getAriaValueText: valuetext,\n        \"aria-labelledby\": \"discrete-slider-small-steps\",\n        step: 1,\n        marks: true,\n        min: 0,\n        max: 100,\n        valueLabelDisplay: \"auto\",\n        onChange: handleHChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DoubleSlider, \"E3ZWA7KWfjtAVzpFShPlxj5p7jY=\");\n\n_c = DoubleSlider;\nexport default DoubleSlider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DoubleSlider\");","map":{"version":3,"sources":["/Users/knp/vae-slider/src/doubleSlider.js"],"names":["Slider","useState","tf","valuetext","value","model","DoubleSlider","sliderVState","setSliderVState","sliderHState","setSliderHState","fileName","url","modelLink","metadata","loadModel","loadLayersModel","console","log","err","dbx","filesListFolder","path","then","response","handleVChange","e","target","handleHChange","process","env","PUBLIC_URL"],"mappings":";;;AAAA;AACA,OAAOA,MAAP,MAAmB,0BAAnB;AACA,OAAO,oBAAP;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;;;AAEA,IAAIC,SAAS,GAAGC,KAAK,IAAK,GAAEA,KAAM,EAAlC;;AACA,IAAIC,KAAJ;;AACA,SAASC,YAAT,GAAwB;AAAA;;AACpB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,CAAD,CAAhD;AACA,MAAIU,QAAQ,GAAI,eAAcF,YAAa,IAAGF,YAAa,MAA3D;AACA,QAAMK,GAAG,GAAG;AACVC,IAAAA,SAAS,EAAE,sDADD;AAEVC,IAAAA,QAAQ,EAAE;AAFA,GAAZ;;AAKA,iBAAeC,SAAf,CAAyBH,GAAzB,EAA8B;AAC5B,QAAI;AACFP,MAAAA,KAAK,GAAG,MAAMH,EAAE,CAACc,eAAH,CAAmBJ,GAAG,CAACC,SAAvB,CAAd;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;AACD,KAHD,CAGE,OAAOc,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACD;AACF;;AAEDC,EAAAA,GAAG,CAACC,eAAJ,CAAoB;AAClBC,IAAAA,IAAI,EAAE;AADY,GAApB,EAEGC,IAFH,CAEQC,QAAQ,IAAIP,OAAO,CAACC,GAAR,CAAYM,QAAZ,CAFpB;;AAIA,WAASC,aAAT,CAAuBC,CAAvB,EAAyB;AACvBlB,IAAAA,eAAe,CAACkB,CAAC,CAACC,MAAF,CAASvB,KAAV,CAAf;AACD;;AACD,WAASwB,aAAT,CAAuBF,CAAvB,EAAyB;AACvBT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,CAAZ;AACAhB,IAAAA,eAAe,CAACgB,CAAC,CAACC,MAAF,CAASvB,KAAV,CAAf;AACD;;AAED,sBACA;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAK,QAAA,GAAG,EAAEyB,OAAO,CAACC,GAAR,CAAYC,UAAZ,GAAyBpB;AAAnC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACE,QAAC,MAAD;AACE,QAAA,WAAW,EAAC,UADd;AAEE,QAAA,gBAAgB,EAAER,SAFpB;AAGE,QAAA,YAAY,EAAE,CAHhB;AAIE,2BAAgB,6BAJlB;AAKE,QAAA,GAAG,EAAE,CALP;AAME,QAAA,GAAG,EAAE,GANP;AAOE,QAAA,KAAK,MAPP;AAQE,QAAA,iBAAiB,EAAC,MARpB;AASE,QAAA,QAAQ,EAAEsB;AATZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF,eAiBE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACE,QAAC,MAAD;AACE,QAAA,YAAY,EAAE,CADhB;AAEE,QAAA,gBAAgB,EAAEtB,SAFpB;AAGE,2BAAgB,6BAHlB;AAIE,QAAA,IAAI,EAAE,CAJR;AAKE,QAAA,KAAK,MALP;AAME,QAAA,GAAG,EAAE,CANP;AAOE,QAAA,GAAG,EAAE,GAPP;AAQE,QAAA,iBAAiB,EAAC,MARpB;AASE,QAAA,QAAQ,EAAEyB;AATZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAiCD;;GA/DMtB,Y;;KAAAA,Y;AAgEP,eAAeA,YAAf","sourcesContent":["// import Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport './doubleSlider.css';\nimport { useState } from 'react';\nimport * as tf from '@tensorflow/tfjs';\n\nlet valuetext = value => `${value}`;\nlet model;\nfunction DoubleSlider() {  \n    const [sliderVState, setSliderVState] = useState(1);\n    const [sliderHState, setSliderHState] = useState(1);\n    let fileName = `/man-images/${sliderHState}_${sliderVState}.png`;\n    const url = {\n      modelLink: 'https://www.dropbox.com/s/mhioc6hkavycmm8/model.json',\n      metadata: 'https://storage.googleapis.com/tfjs-models/tfjs/sentiment_cnn_v1/metadata.json'\n    };\n\n    async function loadModel(url) {\n      try {\n        model = await tf.loadLayersModel(url.modelLink);\n        console.log(model);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    dbx.filesListFolder({  \n      path: './'  \n    }).then(response => console.log(response))\n\n    function handleVChange(e){\n      setSliderVState(e.target.value);\n    } \n    function handleHChange(e){\n      console.log(e);\n      setSliderHState(e.target.value);\n    }\n\n    return (\n    <div className=\"large-box\">  \n      <div className=\"image-box\">\n        <img src={process.env.PUBLIC_URL + fileName}></img>\n      </div>\n      <div className=\"vSlider\">\n        <Slider\n          orientation=\"vertical\"\n          getAriaValueText={valuetext}\n          defaultValue={1}\n          aria-labelledby=\"discrete-slider-small-steps\"\n          min={0}\n          max={100}\n          marks\n          valueLabelDisplay=\"auto\"\n          onChange={handleVChange}\n        />\n      </div>\n      <div className=\"hSlider\">\n        <Slider\n          defaultValue={1}\n          getAriaValueText={valuetext}\n          aria-labelledby=\"discrete-slider-small-steps\"\n          step={1}\n          marks\n          min={0}\n          max={100}\n          valueLabelDisplay=\"auto\"\n          onChange={handleHChange}\n        />\n      </div>\n    </div>\n    );\n  }\n  export default DoubleSlider;"]},"metadata":{},"sourceType":"module"}