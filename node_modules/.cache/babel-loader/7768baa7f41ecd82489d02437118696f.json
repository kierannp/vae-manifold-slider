{"ast":null,"code":"var _jsxFileName = \"/Users/knp/vae-slider/src/doubleSlider.js\",\n    _s = $RefreshSig$();\n\n// import Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport './doubleSlider.css';\nimport { useState } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet decoder;\nlet result;\nconst url = {\n  modelLink: 'https://storage.googleapis.com/test-tfjs/model.json',\n  binData: 'https://storage.googleapis.com/test-tfjs/group1-shard1of1.bin'\n};\n\nfunction DoubleSlider() {\n  _s();\n\n  const [sliderVState, setSliderVState] = useState(1);\n  const [sliderHState, setSliderHState] = useState(1);\n\n  async function loadModel(url) {\n    try {\n      decoder = await tf.loadLayersModel(url.modelLink);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function processState() {\n    await loadModel();\n  }\n\n  function handleVChange(e) {\n    setSliderVState(e.target.value);\n  }\n\n  function handleHChange(e) {\n    console.log(e);\n    setSliderHState(e.target.value);\n  }\n\n  loadModel(url);\n  console.log(decoder);\n  let inputTensor = tf.tensor([sliderHState, sliderVState], [2]);\n  inputTensor.print();\n  decoder.predict(inputTensor);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"large-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-box\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: process.env.PUBLIC_URL + fileName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vSlider\",\n      children: /*#__PURE__*/_jsxDEV(Slider, {\n        orientation: \"vertical\",\n        getAriaValueText: valuetext,\n        defaultValue: 1,\n        \"aria-labelledby\": \"discrete-slider-small-steps\",\n        min: 0,\n        max: 100,\n        marks: true,\n        valueLabelDisplay: \"auto\",\n        onChange: handleVChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hSlider\",\n      children: /*#__PURE__*/_jsxDEV(Slider, {\n        defaultValue: 1,\n        getAriaValueText: valuetext,\n        \"aria-labelledby\": \"discrete-slider-small-steps\",\n        step: 1,\n        marks: true,\n        min: 0,\n        max: 100,\n        valueLabelDisplay: \"auto\",\n        onChange: handleHChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DoubleSlider, \"E3ZWA7KWfjtAVzpFShPlxj5p7jY=\");\n\n_c = DoubleSlider;\nexport default DoubleSlider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DoubleSlider\");","map":{"version":3,"sources":["/Users/knp/vae-slider/src/doubleSlider.js"],"names":["Slider","useState","tf","decoder","result","url","modelLink","binData","DoubleSlider","sliderVState","setSliderVState","sliderHState","setSliderHState","loadModel","loadLayersModel","err","console","log","processState","handleVChange","e","target","value","handleHChange","inputTensor","tensor","print","predict","process","env","PUBLIC_URL","fileName","valuetext"],"mappings":"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","sourcesContent":["// import Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport './doubleSlider.css';\nimport { useState } from 'react';\nimport * as tf from '@tensorflow/tfjs';\n\n\nlet decoder;\nlet result;\nconst url = {\n  modelLink: 'https://storage.googleapis.com/test-tfjs/model.json',\n  binData: 'https://storage.googleapis.com/test-tfjs/group1-shard1of1.bin'\n};\n\nfunction DoubleSlider() {  \n    const [sliderVState, setSliderVState] = useState(1);\n    const [sliderHState, setSliderHState] = useState(1);\n\n    async function loadModel(url) {\n      try {\n        decoder = await tf.loadLayersModel(url.modelLink);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    async function processState() {\n      await loadModel();\n    }\n    function handleVChange(e){\n      setSliderVState(e.target.value);\n    } \n    function handleHChange(e){\n      console.log(e);\n      setSliderHState(e.target.value);\n    }\n    loadModel(url);\n    console.log(decoder);\n    let inputTensor = tf.tensor([sliderHState, sliderVState],[2,]);\n    inputTensor.print();\n    decoder.predict(inputTensor);\n\n\n    return (\n    <div className=\"large-box\">  \n      <div className=\"image-box\">\n        <img src={process.env.PUBLIC_URL + fileName}></img>\n      </div>\n      <div className=\"vSlider\">\n        <Slider\n          orientation=\"vertical\"\n          getAriaValueText={valuetext}\n          defaultValue={1}\n          aria-labelledby=\"discrete-slider-small-steps\"\n          min={0}\n          max={100}\n          marks\n          valueLabelDisplay=\"auto\"\n          onChange={handleVChange}\n        />\n      </div>\n      <div className=\"hSlider\">\n        <Slider\n          defaultValue={1}\n          getAriaValueText={valuetext}\n          aria-labelledby=\"discrete-slider-small-steps\"\n          step={1}\n          marks\n          min={0}\n          max={100}\n          valueLabelDisplay=\"auto\"\n          onChange={handleHChange}\n        />\n      </div>\n    </div>\n    );\n  }\n  export default DoubleSlider;"]},"metadata":{},"sourceType":"module"}